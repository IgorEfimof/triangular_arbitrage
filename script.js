// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ localStorage –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener('DOMContentLoaded', function () {
  loadHistory();
});

document.getElementById('arbitrageForm').addEventListener('submit', function(event) {
  event.preventDefault();

  const winnerOdds = document.getElementById('winnerOdds').value.trim().split(' ').map(Number);
  const totalOdds = document.getElementById('totalOdds').value.trim().split(' ').map(Number);
  const evenOddOdds = document.getElementById('evenOddOdds').value.trim().split(' ').map(Number);
  const bankroll = parseFloat(document.getElementById('bankroll').value);

  let found = false;
  let output = '';

  for (let win of winnerOdds) {
    for (let total of totalOdds) {
      for (let evenOdd of evenOddOdds) {
        const probSum = (1 / win) + (1 / total) + (1 / evenOdd);
        if (probSum < 1) {
          found = true;
          const stake1 = bankroll / (win * probSum);
          const stake2 = bankroll / (total * probSum);
          const stake3 = bankroll / (evenOdd * probSum);
          const totalStaked = stake1 + stake2 + stake3;
          const profit = bankroll - totalStaked;

          const resultHTML = `
            <h2>‚úÖ –ù–∞–π–¥–µ–Ω –ê—Ä–±–∏—Ç—Ä–∞–∂!</h2>
            <p><strong>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:</strong> ${win}</p>
            <p><strong>–¢–æ—Ç–∞–ª:</strong> ${total}</p>
            <p><strong>–ß–µ—Ç/–ù–µ—á–µ—Ç:</strong> ${evenOdd}</p>
            <p><strong>–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:</strong> ${profit.toFixed(2)} ‚ÇΩ</p>
            <p>–°—Ç–∞–≤–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–∫:</p>
            <ul>
              <li>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${stake1.toFixed(2)} ‚ÇΩ</li>
              <li>–¢–æ—Ç–∞–ª: ${stake2.toFixed(2)} ‚ÇΩ</li>
              <li>–ß–µ—Ç/–ù–µ—á–µ—Ç: ${stake3.toFixed(2)} ‚ÇΩ</li>
            </ul>
            <hr>
          `;

          output += resultHTML;

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          addHistoryItem(`üèÜ –ü–æ–±: ${win}, –¢–æ—Ç–∞–ª: ${total}, –ß–µ—Ç/–ù–µ—á–µ—Ç: ${evenOdd}, –ü—Ä–æ—Ñ–∏—Ç: ${profit.toFixed(2)} ‚ÇΩ`);
        }
      }
    }
  }

  if (!found) {
    output = '<h2>‚ùå –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</h2>';
  }

  document.getElementById('result').innerHTML = output;
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
function addHistoryItem(text) {
  const historyList = document.getElementById('historyList');
  const historyItem = document.createElement('li');
  historyItem.textContent = text;
  historyList.appendChild(historyItem);

  saveHistory();
  
  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
  historyList.scrollTop = historyList.scrollHeight;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ localStorage
function saveHistory() {
  const items = [];
  document.querySelectorAll('#historyList li').forEach(li => items.push(li.textContent));
  localStorage.setItem('arbitrageHistory', JSON.stringify(items));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ localStorage
function loadHistory() {
  const historyList = document.getElementById('historyList');
  const data = localStorage.getItem('arbitrageHistory');
  if (data) {
    const items = JSON.parse(data);
    items.forEach(text => {
      const li = document.createElement('li');
      li.textContent = text;
      historyList.appendChild(li);
    });
  }
}

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
document.getElementById('clearHistoryButton').addEventListener('click', function() {
  if (confirm('–¢–æ—á–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?')) {
    document.getElementById('historyList').innerHTML = '';
    localStorage.removeItem('arbitrageHistory');
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–∞–π–ª
document.getElementById('saveHistoryButton').addEventListener('click', function() {
  const items = [];
  document.querySelectorAll('#historyList li').forEach(li => items.push(li.textContent));

  if (items.length === 0) {
    alert('–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å!');
    return;
  }

  const textContent = items.join('\n');
  const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });

  const date = new Date();
  const filename = `arbitrage-history-${date.getDate()}-${date.getMonth()+1}-${date.getFullYear()}.txt`;

  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
});
